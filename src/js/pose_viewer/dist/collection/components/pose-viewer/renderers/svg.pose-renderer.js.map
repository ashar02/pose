{"version":3,"file":"svg.pose-renderer.js","sourceRoot":"","sources":["../../../../src/components/pose-viewer/renderers/svg.pose-renderer.tsx"],"names":[],"mappings":"AACA,OAAO,EAAC,YAAY,EAAC,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAC,CAAC,EAAC,MAAM,eAAe,CAAC;AAEhC,MAAM,OAAO,eAAgB,SAAQ,YAAY;EAE/C,WAAW,CAAC,CAAS,EAAE,KAAqB,EAAE,KAAe;IAC3D,MAAM,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,GAAG,KAAK,CAAC;IAExB,OAAO,CAAC,cACN,EAAE,EAAE,KAAK,CAAC,CAAC,EACX,EAAE,EAAE,KAAK,CAAC,CAAC,EACX,CAAC,EAAE,CAAC,EACJ,KAAK,EAAC,iBAAiB,EACvB,KAAK,EAAE,CAAC;QACN,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG;QAC7B,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;OACzB,CAAC,aACO,CAAC,GACH,CAAC,CAAC;EACb,CAAC;EAED,UAAU,CAAC,IAAoB,EAAE,EAAkB,EAAE,KAAe;IAClE,MAAM,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,GAAG,KAAK,CAAC;IAExB,OAAO,CAAC,YACN,EAAE,EAAE,IAAI,CAAC,CAAC,EACV,EAAE,EAAE,IAAI,CAAC,CAAC,EACV,EAAE,EAAE,EAAE,CAAC,CAAC,EACR,EAAE,EAAE,EAAE,CAAC,CAAC,EACR,KAAK,EAAE;QACL,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG;QAC/B,OAAO,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;OACrC,GACI,CAAC,CAAC;EACX,CAAC;EAED,MAAM,CAAC,KAAyB;IAC9B,MAAM,OAAO,GAAG,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;IACzF,OAAO,CACL,WAAK,KAAK,EAAC,4BAA4B,EAClC,OAAO,EAAE,OAAO,EAChB,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,EAC1B,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;MAC/B,aACG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CACtB,CACA,CACP,CAAA;EACH,CAAC;CACF","sourcesContent":["import {PoseBodyFrameModel, PosePointModel, RGBColor} from \"pose-format\";\nimport {PoseRenderer} from \"./pose-renderer\";\nimport {h} from '@stencil/core';\n\nexport class SVGPoseRenderer extends PoseRenderer {\n\n  renderJoint(i: number, joint: PosePointModel, color: RGBColor) {\n    const {R, G, B} = color;\n\n    return (<circle\n      cx={joint.X}\n      cy={joint.Y}\n      r={4}\n      class=\"joint draggable\"\n      style={({\n        fill: `rgb(${R}, ${G}, ${B})`,\n        opacity: String(joint.C)\n      })}\n      data-id={i}>\n    </circle>);\n  }\n\n  renderLimb(from: PosePointModel, to: PosePointModel, color: RGBColor) {\n    const {R, G, B} = color;\n\n    return (<line\n      x1={from.X}\n      y1={from.Y}\n      x2={to.X}\n      y2={to.Y}\n      style={{\n        stroke: `rgb(${R}, ${G}, ${B})`,\n        opacity: String((from.C + to.C) / 2)\n      }}>\n    </line>);\n  }\n\n  render(frame: PoseBodyFrameModel) {\n    const viewBox = `0 0 ${this.viewer.pose.header.width} ${this.viewer.pose.header.height}`;\n    return (\n      <svg xmlns=\"http://www.w3.org/2000/svg\"\n           viewBox={viewBox}\n           width={this.viewer.elWidth}\n           height={this.viewer.elHeight}>\n        <g>\n          {this.renderFrame(frame)}\n        </g>\n      </svg>\n    )\n  }\n}\n"]}